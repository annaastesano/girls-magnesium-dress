// ALT FONT FAMILY
.dmb-u-alt-font {
  font-family: $h-font-family-google-sans;
}

.dmb-u-google-sans-display {
  font-family: 'Google Sans Display', 'Google Sans', 'Roboto', Arial, Helvetica, sans-serif;
  font-weight: 700;
}

.dmb-u-note {
  font-size: 12px;
}

.dmb-u-no-margin {
  margin: 0 !important;
}

.dmb-u-hide-mobile {
  @include dmb-mq($until: tablet) {
    display: none !important;
  }
}

.dmb-u-only-mobile {
  @include dmb-mq($from: tablet) {
    display: none !important;
  }
}

// RESPONSIVE VERTCIAL SPACINGS
// Resposive vertical spacing utility classes generated from $dmb-vertical-spacings map in ./_variables.scss
//
// Examples:
// .dmb-u-m-t-s > responsive margin top small
// .dmb-u-m-t-m > responsive margin top medium
// .dmb-u-m-t-l > responsive margin top large
// .dmb-u-m-b-s > responsive margin bottom small
// .dmb-u-m-b-m > responsive margin bottom medium
// .dmb-u-m-b-l > responsive margin bottom large
// .dmb-u-p-t-s > responsive padding top small
// .dmb-u-p-t-m > responsive padding top medium
// .dmb-u-p-t-l > responsive padding top large
// .dmb-u-p-b-s > responsive padding bottom small
// .dmb-u-p-b-m > responsive padding bottom medium
// .dmb-u-p-b-l > responsive padding bottom large

$properties: (margin, padding);
$positions: (top, bottom);

@each $prop in $properties {
  @each $position in $positions {
    .dmb-u-#{str-slice($prop, 0, 1)} {
      &-#{str-slice($position, 0, 1)} {
        @each $size in (s, m, l) {
          &-#{$size} {
            $spacings: map-get($dmb-vertical-spacings, #{$size});
            #{$prop}-#{$position}: map-get($spacings, 'mobile')  !important;

            // Add tablet spacings if different from mobile
            @if map-get($spacings, 'mobile') != map-get($spacings, 'tablet') {
              @include dmb-mq($from: tablet) {
                #{$prop}-#{$position}: map-get($spacings, 'tablet') !important;
              }
            }

            // Add desktop spacings if different from tablet
            @if map-get($spacings, 'tablet') != map-get($spacings, 'desktop') {
              @include dmb-mq($from: desktop) {
                #{$prop}-#{$position}: map-get($spacings, 'desktop') !important;
              }
            }
          }
        }
      }
    }
  }
}

.dmb-u-m-b-xs {
  margin-bottom: 10px !important;
}

.dmb-h-visible {
  display: block !important;
}

.dmb-h-hidden {
  display: none !important;

  @include print-styles {
    &--print {
      display: none !important;
    }
  }

  @include screen-styles {
    &--screen {
      display: none !important;
    }
  }
}

.dmb-u-grey-bg {
  background: $dmb-color-blue-solitude !important;
}

.dmb-dropdown-arrow {
  appearance: none;
  background-image: url('../img/dropdown-arrow.svg') !important;
  background-position: right 10px center !important;
  background-repeat: no-repeat !important;
  background-size: 1em !important;
  text-indent: 1px; // Hide default arrow Firefox
  text-overflow: '';  // Hide default arrow Firefox

  &--left {
    background-position: left 10px center !important;
    padding-left: calc(1em + 20px) !important;
  }
}

.dmb-u-underlined-heading {
  border-bottom: 6px solid $dmb-color-grey-zircon;
  max-width: 500px;
  padding-bottom: 15px;
}

.dmb-u-rounded {
  border-radius: 8px;
}

.dmb-u-text-muted {
  color: $dmb-color-grey-shuttle !important;
}

.dmb-overlay {
  background-color: $dmb-color-grey-shuttle;
  border-radius: $dmb-border-radius-medium;
  color: #fff;
  z-index: 1;
}
