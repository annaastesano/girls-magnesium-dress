$infographic-default: $h-google-blue-400;

$step-colors: $h-google-blue-100, $h-google-blue-500, $h-google-blue-700, $h-google-blue-900;
$step-text-colors: $h-gm-blue-700, $h-gm-blue-700, $h-google-blue-800, $h-google-blue-900;
$step-bar-height: 8px;
$step-header-height: 64px;
$roundel-size: 22px;

.dmb-infographic {
  $block: &;

  position: relative;

  &::before,
  &::after {
    bottom: 0;
    content: '';
    display: block;
    position: absolute;
    top: 0;
    width: $h-site-padding-mobile;
    z-index: 2;

    @include bp(s) {
      width: $h-site-padding;
    }

    @include bp(m) {
      content: none;
      display: none;
    }
  }

  &::before {
    background-image: linear-gradient(to right, $dmb-background-grey-color 0%, transparent 100%);
    right: 100%;
  }

  &::after {
    background-image: linear-gradient(to right, transparent 0%, $dmb-background-grey-color 100%);
    left: 100%;
  }

  &__inner {
    display: flex;
    list-style-type: none;
    margin-bottom: 0;
    margin-left: 0;
    overflow: hidden;
    padding-left: $h-site-padding-mobile;
    padding-right: $h-site-padding-mobile;
    position: relative;
    width: 350%;
    width: calc(350% - #{$h-site-padding-mobile * 6}); // sass-lint:disable-line no-duplicate-properties

    @include bp(s) {
      padding-left: $h-site-padding;
      padding-right: $h-site-padding;
      width: 175%;
      width: calc(175% - #{$h-site-padding * 2}); // sass-lint:disable-line no-duplicate-properties
    }

    @include bp(m) {
      width: auto;
    }
  }

  &__roundel {
    background: $dmb-background-grey-color;
    height: $roundel-size;
    left: $h-site-padding-mobile;
    position: absolute;
    right: $h-site-padding-mobile;
    top: #{$step-header-height + ($step-bar-height / 2) - ($roundel-size / 2)};
    transform: translate3d(0, 0, 0);
    will-change: transform;

    @include bp(s) {
      left: $h-site-padding;
      right: $h-site-padding;
    }

    &::before,
    &::after {
      border-color: $infographic-default;
      border-radius: 50%;
      border-style: solid;
      content: '';
      display: block;
      left: -#{$roundel-size / 2};
      position: absolute;
      z-index: 3;
    }

    &::before {
      background-color: #fff;
      border-width: 2px;
      height: $roundel-size;
      width: $roundel-size;
    }

    &::after {
      border-width: 4px;
      margin: #{($roundel-size - 8px) / 2};
    }

    #{$block}--in-view & {
      transform: translateX(100%);
      transform: translate3d(100%, 0, 0); // sass-lint:disable-line no-duplicate-properties
      transition: transform 1.5s .5s cubic-bezier(0, 0, .2, 1);

      &::before,
      &::after {
        border-color: $h-google-blue-900;
        transition: border-color 1.5s .5s cubic-bezier(0, 0, .2, 1);
      }
    }
  }

  &__step {
    width: 25%;
  }

  &__step-t,
  &__step-d {
    padding-left: $h-site-padding-mobile;
    padding-right: $h-site-padding-mobile;

    @include bp(s) {
      padding-left: $h-site-padding;
      padding-right: $h-site-padding;
    }

    @include bp(m) {
      padding-left: 20px;
      padding-right: 20px;
    }
  }

  &__step-t {
    font-family: $h-font-family-google-sans;
    font-size: 18px;
    font-weight: $h-font-weight-medium;
    height: $step-header-height;
    line-height: 24px;
    padding-bottom: 20px;
    padding-top: 20px;
    position: relative;
    text-align: center;
    white-space: nowrap;
    z-index: 1;

    @media (min-width: 1400px) {
      // Max wants the text to look centered without using text-align: justify on the body
      text-indent: -25px;
    }
  }

  &__step-d {
    margin-left: 0;
    padding-bottom: 44px;
    padding-top: 44px;
    position: relative;

    &::before,
    &::after {
      content: '';
      display: block;
      height: $step-bar-height;
      left: 0;
      position: absolute;
      top: 0;
      width: 100%;
    }

    &::after {
      left: -50%;
    }
  }

  @for $i from 1 through length($step-text-colors) {
    $color:  nth($step-text-colors, $i);

    &__step:nth-of-type(#{$i}) &__step-t {
      color: $color;
    }
  }

  @each $color in $step-colors {
    $i: index($step-colors, $color);

    &__step:nth-of-type(#{$i}) &__step-d {
      @if ($i == 1) {
        &::before {
          background-image: linear-gradient(to right, transparent 0%, $color 30%, $color 100%);
        }

        &::after {
          content: none;
          display: none;
        }
      } @else {
        &::before {
          background-color: $color;
        }

        &::after {
          $previous-color: nth($step-colors, $i - 1);
          background-image: linear-gradient(to right, $previous-color 0%, $color 100%);
        }
      }
    }
  }
}
