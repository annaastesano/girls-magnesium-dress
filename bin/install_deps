#!/usr/bin/env python

import subprocess
import shutil
import stat
import os
import sys
import json

from os import path
from StringIO import StringIO
from zipfile import ZipFile
from urllib import urlopen

REQUIREMENTS = [ "pip", "git", "npm" ]

FILES_IGNORED_FOR_DELETION = ["google_appengine"]

PROJECT_ROOT = path.dirname(path.dirname(path.abspath(__file__)))
THIRD_PARTY_DIR = path.join(PROJECT_ROOT, 'third_party')
REQUIREMENTS_DIR = path.join(PROJECT_ROOT, 'requirements')

REQUIREMENTS_FILE = os.path.join(REQUIREMENTS_DIR, "prod.txt")
DEV_REQUIREMENTS_FILE = os.path.join(REQUIREMENTS_DIR, "local.txt")
DEV_TARGET_DIR = os.path.join(THIRD_PARTY_DIR, "local", "sitepackages")
PROD_TARGET_DIR = os.path.join(THIRD_PARTY_DIR, "prod", "sitepackages")

PACKAGE_JSON = path.join(PROJECT_ROOT, 'package.json')

APPENGINE_TARGET_DIR = os.path.join(THIRD_PARTY_DIR, "google_appengine")

APPENGINE_SDK_VERSION = "1.9.57"
APPENGINE_SDK_FILENAME = "google_appengine_%s.zip" % APPENGINE_SDK_VERSION

# List of (linkname, target) tuples
SYMLINKS = [

]

# Google move versions from 'featured' to 'deprecated' when they bring
# out new releases
FEATURED_SDK_REPO = "https://storage.googleapis.com/appengine-sdks/featured/"
DEPRECATED_SDK_REPO = "https://storage.googleapis.com/appengine-sdks/deprecated/%s/" % APPENGINE_SDK_VERSION.replace('.', '')

def check_requirements():
    #Make sure the user has everything they need
    for command in REQUIREMENTS:
        if not subprocess.check_output(["which", command]).strip():
            raise RuntimeError("You must install the '%s' command" % command)


def create_third_party_dir():
    if not path.exists(THIRD_PARTY_DIR):
        os.makedirs(THIRD_PARTY_DIR)


def install_python_deps():
    """Install all the prod and dev requirements into their respective directories."""
    pip_msg = "Running pip to install {filename} dependencies into {target}..."

    pip_targets = [
        (REQUIREMENTS_FILE, PROD_TARGET_DIR),
        (DEV_REQUIREMENTS_FILE, DEV_TARGET_DIR)
    ]
    for requirements, target in pip_targets:

        if os.path.exists(target):
            # remove all folders and files, leaving symlinks which point to submodules
            filenames = (
                filename for filename in os.listdir(target) if
                filename not in FILES_IGNORED_FOR_DELETION
            )
            for filename in filenames:
                path = os.path.join(target, filename)
                if os.path.isdir(path) and not os.path.islink(path):
                    shutil.rmtree(path)
                elif os.path.isfile(path):
                    os.remove(path)

        # install all the required third party libs into the target directory
        print(pip_msg.format(filename=os.path.basename(requirements), target=target))
        args = ["pip", "install", "-r", requirements, "-t", target, "-I"]
        p = subprocess.Popen(args)
        p.wait()


def install_app_engine_sdk():
    """Download and install the Google App Engine SDK."""
    if not os.path.exists(APPENGINE_TARGET_DIR):
        print('Downloading the AppEngine SDK...')

        # First try and get it from the 'featured' folder
        sdk_file = urlopen(FEATURED_SDK_REPO + APPENGINE_SDK_FILENAME)
        if sdk_file.getcode() == 404:
            # Failing that, 'deprecated'
            sdk_file = urlopen(DEPRECATED_SDK_REPO + APPENGINE_SDK_FILENAME)

        # Handle other errors
        if sdk_file.getcode() >= 299:
            raise Exception(
                'App Engine SDK could not be found. {} returned code {}.'.format(
                    sdk_file.geturl(), sdk_file.getcode())
            )

        zipfile = ZipFile(StringIO(sdk_file.read()))
        zipfile.extractall(THIRD_PARTY_DIR)

        # Make sure the dev_appserver and appcfg are executable
        for module in ("dev_appserver.py", "appcfg.py"):
            app = os.path.join(APPENGINE_TARGET_DIR, module)
            st = os.stat(app)
            os.chmod(app, st.st_mode | stat.S_IEXEC)

    else:
        print(
            'Not updating SDK as it exists. Remove {} and re-run to get the '
            'latest SDK'.format(APPENGINE_TARGET_DIR)
        )


def install_node_modules():
    command = ["npm", "install"]
    subprocess.check_call(command)


def make_symlinks():
    for link_name, source in SYMLINKS:
        if not path.exists(link_name):
            os.symlink(source, link_name)


def update_submodules():
    if not os.path.exists(".git"):
        return

    subprocess.check_call(["git", "submodule", "update", "--init"])


def symlink_pil():
    """
        App Engine doesn't ship PIL, and we shouldn't deploy it. However,
        the SDK PIL path is still added to the sys.path and we can abuse this
        so it picks up the version of Pillow in our local packages rather than the
        system wide version.
    """

    target_folder = os.path.join(APPENGINE_TARGET_DIR, "lib", "PIL-1.1.7")

    if os.path.exists(target_folder):
        shutil.rmtree(target_folder)
    os.makedirs(target_folder)

    link_name = os.path.join(target_folder, "PIL")

    target = os.path.join(THIRD_PARTY_DIR, "local", "sitepackages", "PIL")

    if not os.path.exists(link_name) and os.path.exists(target):
        os.symlink(target, link_name)


if __name__ == "__main__":
    check_requirements()
    create_third_party_dir()

    if "--js-only" not in sys.argv:
        install_node_modules()

    if "--python-only" not in sys.argv:
        install_python_deps()

    install_app_engine_sdk()
